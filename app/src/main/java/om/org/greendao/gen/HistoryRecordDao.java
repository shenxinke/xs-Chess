package om.org.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.xswq.chess.myapplication.greendao.entity.HistoryRecord;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HISTORY_RECORD".
*/
public class HistoryRecordDao extends AbstractDao<HistoryRecord, Long> {

    public static final String TABLENAME = "HISTORY_RECORD";

    /**
     * Properties of entity HistoryRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Historyid = new Property(0, Long.class, "historyid", true, "_id");
        public final static Property WhiteUserId = new Property(1, String.class, "whiteUserId", false, "WHITEUSERID");
        public final static Property BlackUserName = new Property(2, String.class, "blackUserName", false, "BLACKUSERNAME");
        public final static Property BlackHead = new Property(3, String.class, "blackHead", false, "BLACKHEAD");
        public final static Property WhiteUserName = new Property(4, String.class, "whiteUserName", false, "BHITEUSERNAME");
        public final static Property WhiteHead = new Property(5, String.class, "whiteHead", false, "WHITEHEAD");
        public final static Property EndTime = new Property(6, long.class, "endTime", false, "ENDTIME");
        public final static Property BlackUserLevel = new Property(7, String.class, "blackUserLevel", false, "BLACKUSERLEVEL");
        public final static Property WhiteUserLevel = new Property(8, String.class, "whiteUserLevel", false, "WHITEUSERLEVEL");
        public final static Property PlayResult = new Property(9, String.class, "playResult", false, "PLAYRESULT");
        public final static Property BlackUserId = new Property(10, String.class, "blackUserId", false, "BLACKUSERID");
        public final static Property Id = new Property(11, String.class, "id", false, "ID");
        public final static Property EvaluateState = new Property(12, String.class, "evaluateState", false, "EVALUATESTATE");
        public final static Property GameType = new Property(13, String.class, "gameType", false, "GAMETYPE");
        public final static Property ChessId = new Property(14, String.class, "chessId", false, "CHESSID");
        public final static Property Collect = new Property(15, String.class, "collect", false, "COLLECT");
    }


    public HistoryRecordDao(DaoConfig config) {
        super(config);
    }
    
    public HistoryRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HISTORY_RECORD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: historyid
                "\"WHITEUSERID\" TEXT," + // 1: whiteUserId
                "\"BLACKUSERNAME\" TEXT," + // 2: blackUserName
                "\"BLACKHEAD\" TEXT," + // 3: blackHead
                "\"BHITEUSERNAME\" TEXT," + // 4: whiteUserName
                "\"WHITEHEAD\" TEXT," + // 5: whiteHead
                "\"ENDTIME\" INTEGER NOT NULL ," + // 6: endTime
                "\"BLACKUSERLEVEL\" TEXT," + // 7: blackUserLevel
                "\"WHITEUSERLEVEL\" TEXT," + // 8: whiteUserLevel
                "\"PLAYRESULT\" TEXT," + // 9: playResult
                "\"BLACKUSERID\" TEXT," + // 10: blackUserId
                "\"ID\" TEXT," + // 11: id
                "\"EVALUATESTATE\" TEXT," + // 12: evaluateState
                "\"GAMETYPE\" TEXT," + // 13: gameType
                "\"CHESSID\" TEXT," + // 14: chessId
                "\"COLLECT\" TEXT);"); // 15: collect
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HISTORY_RECORD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, HistoryRecord entity) {
        stmt.clearBindings();
 
        Long historyid = entity.getHistoryid();
        if (historyid != null) {
            stmt.bindLong(1, historyid);
        }
 
        String whiteUserId = entity.getWhiteUserId();
        if (whiteUserId != null) {
            stmt.bindString(2, whiteUserId);
        }
 
        String blackUserName = entity.getBlackUserName();
        if (blackUserName != null) {
            stmt.bindString(3, blackUserName);
        }
 
        String blackHead = entity.getBlackHead();
        if (blackHead != null) {
            stmt.bindString(4, blackHead);
        }
 
        String whiteUserName = entity.getWhiteUserName();
        if (whiteUserName != null) {
            stmt.bindString(5, whiteUserName);
        }
 
        String whiteHead = entity.getWhiteHead();
        if (whiteHead != null) {
            stmt.bindString(6, whiteHead);
        }
        stmt.bindLong(7, entity.getEndTime());
 
        String blackUserLevel = entity.getBlackUserLevel();
        if (blackUserLevel != null) {
            stmt.bindString(8, blackUserLevel);
        }
 
        String whiteUserLevel = entity.getWhiteUserLevel();
        if (whiteUserLevel != null) {
            stmt.bindString(9, whiteUserLevel);
        }
 
        String playResult = entity.getPlayResult();
        if (playResult != null) {
            stmt.bindString(10, playResult);
        }
 
        String blackUserId = entity.getBlackUserId();
        if (blackUserId != null) {
            stmt.bindString(11, blackUserId);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(12, id);
        }
 
        String evaluateState = entity.getEvaluateState();
        if (evaluateState != null) {
            stmt.bindString(13, evaluateState);
        }
 
        String gameType = entity.getGameType();
        if (gameType != null) {
            stmt.bindString(14, gameType);
        }
 
        String chessId = entity.getChessId();
        if (chessId != null) {
            stmt.bindString(15, chessId);
        }
 
        String collect = entity.getCollect();
        if (collect != null) {
            stmt.bindString(16, collect);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, HistoryRecord entity) {
        stmt.clearBindings();
 
        Long historyid = entity.getHistoryid();
        if (historyid != null) {
            stmt.bindLong(1, historyid);
        }
 
        String whiteUserId = entity.getWhiteUserId();
        if (whiteUserId != null) {
            stmt.bindString(2, whiteUserId);
        }
 
        String blackUserName = entity.getBlackUserName();
        if (blackUserName != null) {
            stmt.bindString(3, blackUserName);
        }
 
        String blackHead = entity.getBlackHead();
        if (blackHead != null) {
            stmt.bindString(4, blackHead);
        }
 
        String whiteUserName = entity.getWhiteUserName();
        if (whiteUserName != null) {
            stmt.bindString(5, whiteUserName);
        }
 
        String whiteHead = entity.getWhiteHead();
        if (whiteHead != null) {
            stmt.bindString(6, whiteHead);
        }
        stmt.bindLong(7, entity.getEndTime());
 
        String blackUserLevel = entity.getBlackUserLevel();
        if (blackUserLevel != null) {
            stmt.bindString(8, blackUserLevel);
        }
 
        String whiteUserLevel = entity.getWhiteUserLevel();
        if (whiteUserLevel != null) {
            stmt.bindString(9, whiteUserLevel);
        }
 
        String playResult = entity.getPlayResult();
        if (playResult != null) {
            stmt.bindString(10, playResult);
        }
 
        String blackUserId = entity.getBlackUserId();
        if (blackUserId != null) {
            stmt.bindString(11, blackUserId);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(12, id);
        }
 
        String evaluateState = entity.getEvaluateState();
        if (evaluateState != null) {
            stmt.bindString(13, evaluateState);
        }
 
        String gameType = entity.getGameType();
        if (gameType != null) {
            stmt.bindString(14, gameType);
        }
 
        String chessId = entity.getChessId();
        if (chessId != null) {
            stmt.bindString(15, chessId);
        }
 
        String collect = entity.getCollect();
        if (collect != null) {
            stmt.bindString(16, collect);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public HistoryRecord readEntity(Cursor cursor, int offset) {
        HistoryRecord entity = new HistoryRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // historyid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // whiteUserId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // blackUserName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // blackHead
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // whiteUserName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // whiteHead
            cursor.getLong(offset + 6), // endTime
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // blackUserLevel
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // whiteUserLevel
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // playResult
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // blackUserId
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // id
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // evaluateState
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // gameType
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // chessId
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15) // collect
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, HistoryRecord entity, int offset) {
        entity.setHistoryid(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setWhiteUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBlackUserName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBlackHead(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setWhiteUserName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setWhiteHead(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setEndTime(cursor.getLong(offset + 6));
        entity.setBlackUserLevel(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setWhiteUserLevel(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPlayResult(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setBlackUserId(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setId(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setEvaluateState(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setGameType(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setChessId(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setCollect(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(HistoryRecord entity, long rowId) {
        entity.setHistoryid(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(HistoryRecord entity) {
        if(entity != null) {
            return entity.getHistoryid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(HistoryRecord entity) {
        return entity.getHistoryid() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
