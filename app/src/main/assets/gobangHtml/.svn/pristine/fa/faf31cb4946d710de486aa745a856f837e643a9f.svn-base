function coursewareTeach(Vue){
	//01 加载棋盘列表
	if(readCookie('historyJobTime')) {
		loadLatelyJob({
			createTime: readCookie('historyJobTime')
		});
		delCookie('historyJobTime');
	} else {
		loadLatelyJob();
	}

	var vm = new Vue({
		el: "#mainWrapper",
		data: {
			pageinfo: {},
			arrTitle: {
                     msg: [
                           '01 围棋礼仪',
                           '02 棋盘棋子',
                           '03 棋子的气',
                           '04 紧气提子',
                           '05 打吃,逃子',
                           '06 双方互相打吃',
                           '07 虎口',
                           '08 禁入点（禁着点）！',
                           '09 打劫',
                           '10 打二还一和打多还一',
                           '11 连接和切断',
                           '12 一、二线吃子的秘密！',
                           '13 双打吃',
                           '14 征吃',
                           '15 门吃',
                           '16 抱吃',
                           '17 枷吃',
                           '18 扑与倒扑',
                           '19 接不归',
                           '20 利用对方缺陷逃子',
                           '21 可逃之子与应弃之子',
                           '22 两眼活棋',
                           '23 基础死活常型(一)',
                           '24 基础死活常型(二)',
                           '25 杀棋基础',
                           '26 获取基础',
                           '27 布局基础(一)',
                           '28 布局基础(二)',
                           '29 对杀基础(一)',
                           '30 对杀基础(二)',
                           '31 综合吃子(一)',
                           '32 综合吃子(二)',
                           '33 好形和坏形',
                           '34 官子入门',
                           '35 胜负计算'
                           ],
				title: '',
			},
			titlerequs:'',
			commentList:[],
			correctResultsList:[],
			step:'',
			comment:[],
			commentStr:'',
			total:'',
			num:''
		},
		methods: {
			//根据棋谱id 加载棋盘
			loadMyJob: function(questionId) {
				$.ajax({
					type: "GET",
					url: "/gobangteach/classroom/loadQuestionTeach",
					data: "questionid="+questionId,
					dataType: 'json',
					success: function(data) {
						console.log("棋盘信息", data);
						window.currentGameId = data.data.chessid;
						window.quesionID = questionId;
						$('.imgBox').removeClass('qipuActive')
						$('.imgBox[data-id=' + window.quesionID + ']').addClass('qipuActive');
						eve.f("HandlerSignInReq", uid)();
						setTimeout(function(){
							eve.f("HandlerHideStep")();
						}, 100);
						//棋局开始提示信息
						$('#canvasBox').canvasAlert({
							content:data.data.questionbank.titlerequs===null||
							data.data.questionbank.titlerequs===''?
							data.data.questionbank.description.split('_')[0]:
							data.data.questionbank.titlerequs
						});
						vm.titlerequs = data.data.questionbank.titlerequs===null||
						data.data.questionbank.titlerequs===''?
								data.data.questionbank.description.split('_')[0]:
								data.data.questionbank.titlerequs;
						var _index = $(".bg_teach_listBg.active").index();
						_index == -1?_index=0:_index=_index;
						vm.commentList = 	data.data.commentList;  //讲解内容
						vm.correctResultsList = data.data.correctResultsList; //步
						var arr = vm.correctResultsList[_index];
						vm.step = '0/'+arr.length;
						vm.comment = vm.commentList[_index];
						vm.commentStr = '';
					},
					error: function(XMLHttpRequest, data) {
						alert("获取房间信息失败");
					}
				});
			},
			attrClass:function($event){
				var oId = $('.imgBox.qipuActive').attr('data-id');
				if(oId) {
					vm.loadMyJob(oId);
				}
				var _ev = $event.currentTarget;
				var _index = $(_ev).index();
				$(_ev).addClass('active').siblings().removeClass('active');
				var arr = vm.correctResultsList[_index];
				vm.step = '0/'+arr.length;
				var arrComment = vm.commentList[_index];
				vm.comment = arrComment;
			},
			//点下一步
			nextStep:function(){
				//判断选中第几个变化图
				var _index = $(".bg_teach_listBg.active").index();
				var arr = vm.correctResultsList[_index];
				var step = $("#step").text().split('/')[0]*1;
				if(step == arr.length){
				}else{
					vm.step = (step+1)+'/'+arr.length;
					eve.f("HandlerAction", arr[step])();
					vm.commentStr = vm.comment[step];
				}
				
			},
			page:function(pageNum){
				var pageinfo = this.pageinfo;
				console.log(pageinfo)
					loadLatelyJob({
						pageNum: pageNum
					});
				
			},
			//重做
			resetChess:function(){
				var oId = $('.imgBox.qipuActive').attr('data-id');
				if(oId) {
					vm.loadMyJob(oId);
				}
			},
			formatTime: function(time) {
				return DateFormat.format(new Date(time), 'yyyy-MM-dd hh:mm:ss');
			}
		},
		mounted: function() {
			//修改棋谱列表标题
			this.arrTitle.title = this.arrTitle.msg[jsonlink().classId - 1];
			console.log(this.arrTitle.title)
		}

	});

	function loadLatelyJob(condition) {
		var params = condition || {};
		params.pageNum = params.pageNum || jsonlink().index;
		params.pageSize = 1;
		params.classId = jsonlink().classId;
		params.titlesource = 1;
		$.ajax({
			url: '/gobangteach/QuestionbankController/getQuestionbankByClassId',
			type: "POST",
			dataType: "json",
			data: $.param(params),
			success: function(data) {
				$(".bg_teach_listBg").eq(0).addClass('active');
				console.log('棋谱列表', data.data)
				if(data.data.list.length == 0) {
					
				} else {
					$('.imgBox').removeClass('wrong right');
					vm.loadMyJob(data.data.list[0].id);
					vm.pageinfo = data.data;
					vm.total = data.data.total;
					vm.num = data.data.pageNum;
					
				}
			}
		});
	}
	//落子声音
	eve.on("HandlerAction", function(takeBlack, takeWhite) {
		$("#stepmusic")[0].play();
	});
	// 棋盘加载完毕通知
	eve.on("AppOnEnter", function() {
		eve.f("SocketStart")();
		console.log(1)
	});
	eve.on("SocketOpen", function() {
		console.log(2)
		console.log("SocketOpen");
		eve.f("HandlerSignInReq", uid)();
	});

	eve.on("SignInResponse", function() {
		console.log(3)
		//layer.close(layerload);
		console.log("SignInResponse, gameid is ", window.currentGameId);
		eve.f("HandlerEnterGame", window.currentGameId)()
		//;

	});

	eve.on("_ConfirmTouchEnded_", function(p1, p2) {
		console.log(4)
		eve.f(p1, p2)();
	});
}
