<!DOCTYPE html>
<html>
	<head>
		<meta charset="UTF-8">
		<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
		<meta name="renderer" content="webkit">
		<meta name="viewport" content="width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no" />
		<title>先手围棋智能教育服务平台</title>

		<link rel="stylesheet" type="text/css" href="css/lib/public.css">
		<link rel="stylesheet" type="text/css" href="css/custom/webStyle.css"/>
		<link rel="stylesheet" type="text/css" href="css/custom/play.css">
		<link rel="stylesheet" type="text/css" href="libs/swiper/css/idangerous.swiper.css"/>
		<script src="js/gobang/common.js" type="text/javascript" charset="utf-8" name="公共配置信息"></script>
		<script type="text/javascript" src="libs/jquery/jquery.js"></script>
		<script type="text/javascript" src="libs/vuejs/vue.js"></script>
		<script type="text/javascript" src="libs/layer/layer-v3.1.1/layer/layer.js"></script>
		<script src="libs/swiper/js/idangerous.swiper.min.js" type="text/javascript" charset="utf-8"></script>
		<script type="text/javascript" src="js/lib/rem.js"></script>
		<!-- 棋盘 -->
		<link rel="stylesheet" type="text/css" href="chess/css/chess.css"/>
		<link rel="stylesheet" type="text/css" href="chess/skin/skin1/skin1.css"/>
		<script src="chess/js/eve.js" type="text/javascript" charset="utf-8"></script>
		<script src="chess/js/XSGO.js" type="text/javascript" charset="utf-8"></script>
		<script src="chess/js/bundle.js" type="text/javascript" charset="utf-8"></script>
		<script src="chess/js/GSocket.js" type="text/javascript" charset="utf-8"></script>
		<script src="libs/pinchzoom/pinchzoom.js" type="text/javascript" charset="utf-8"></script>
	</head>
	<style type="text/css"></style>
	<!--检查作业错题详情-->
	<body style="display: none;">
		<div id='questionStore' class="ha100 oh">
			<p class="fs30 df ai-c jc-c bge6f wa100 c003 h80">{{description}}</p>
			<div class="rel boardBg" id='canvasBox'>
				<div class="chessBox wa100 h750 oh">
					<div id="gameCanvas" onselectstart="return false"></div>
				</div>
			</div>
			<div class="btmBox wa100 df ai-c jc-c fw-w " v-show='!qrlzState'>
				<div class="w700 h210 mb40 swiper-container oh">
					<div class="swiper-wrapper">
						<div class="swiper-slide " v-for='(x,index) in chessManualList.list' @click="loadMyJob(x.id,x.collect,index,x.ix)">
							<div :data-id='x.id' :data-index='index' :data-ix='x.ix' class="w210 h210 m0a bgf rel imgBox">
								<div class="wa100 ha100 b3red abs tp0 lt0 dn bkuang"></div>
								<img class="wa100 ha100" :src="x.snapshot" alt="" />
							</div>
						</div>
					</div>
				</div>
				<div class="wa100 fs30 df ai-c jc-sb fw-w pl30 pr30">
					<div class="">
						<p v-text="'做错次数：'+ix+'次'"></p>
						<span v-if='wrongTopic.correctRate' v-text='"正确率:"+(wrongTopic.correctRate*100).toFixed(2)+"%"'>正确率：32%</span>
						<span v-else>正确率：0%</span>
					</div>
					<div title='收藏按钮' @click='collect' :class='["h80 w80",collectMsg.collect===1?"bg_btn_ysc":"bg_btn_sc"]'></div>
				</div>
				<div class="wa100 h70 df ai-c jc-sa fw-w">
					<button class="btn-n w130 h60 bg_qs_01 cc06804" @click='getList(chessManualList.prePage)'>上一页</button>
					<button class="btn-n w130 h60 bg_qs_01 cc06804" @click='getList(chessManualList.nextPage)'>下一页</button>
				</div>
			</div>
			
			<div v-show='qrlzState' class="df ai-c jc-sa pt30 pl20 pr20">
				<button type="button" class="w72 h72 btn-n btn_w" @click="game.steering('w')"></button>
				<button type="button" class="w72 h72 btn-n btn_s" @click="game.steering('s')"></button>
				<button type="button" class="h72 w150 btn-n bt_btn ccf5003 fs30" @click="game.steering('e')">确认落子</button>
				<button type="button" class="w72 h72 btn-n btn_a" @click="game.steering('a')"></button>
				<button type="button" class="w72 h72 btn-n btn_d" @click="game.steering('d')"></button>
			</div>
			<audio src="music/ChipMany.wav" type="hidden" id="ChipMany"></audio>
			<audio src="music/STONE0.wav" type="hidden" id="stepmusic"></audio>
			<audio src="music/aswError.mp3" type="hidden" id="aswError"></audio>
			<audio src="music/aswRight.mp3" type="hidden" id="aswRight"></audio>
		</div>

	
		<script type="text/javascript">
			
					$('body').show();
					$('#gameCanvas').css('width', $('body').width()).css('height', $('body').width());
					$('.btmBox').height($('body').height() - $('body').width()-document.documentElement.offsetWidth/7.5*0.8)
                    var sgfState = 0;
					var mySwiper
					var vm = new Vue({
						el: '#questionStore',
						data: {
							chessManualList: {
								list: []
							},
							qrlzState: 0,
							game:'',//棋盘
							collectMsg:{
								collect:'',
								id:'',
								index:0
							},
							wrongTopic:'',
							ix:'',//做题次数
							correctRate:'' ,//正确率
							description:""
						},
						methods: {
							//棋谱列表
							getList: function(pageNum) {
								$this = this
								//console.log(null===1?1:2)
								$.ajax({
									type:'post',
									url:http+'/gobangteach/SchoolController/wrongTopicRankings',
									data:{
										ClassInfoId:jsonlink().classInfoId,
										jobId:jsonlink().jobid,
										pageSize:9,
										pageNum:1,
										token: token,
										uid: uid
									},
									success:function(data){
										console.log('1',data)
										vm.chessManualList=data.data;
										if(data.data.list.length!=0){
											vm.loadMyJob(data.data.list[0].id,data.data.list[0].collect,0,data.data.list[0].ix)
										}else{
											//如果没有错题 加载电子棋盘
											$this.game.config.road = 19; //路数为19路
											$this.game.config.type =1;	//棋盘类型 1为电子棋盘
											$this.game.init();	// 重新初始化
										}
										$('.imgBox').removeClass('wrong right')
										$this.$nextTick(function() {
											mySwiper.reInit();
											mySwiper.swipeTo(0);
										})
										document.location.href = "myschema://go?a=14"
									},
									error:function(){
										document.location.href = "myschema://go?a=14"
									}
								})
							},
							//根据棋谱id 加载棋盘
							loadMyJob: function(questionId,collect,index,ix) {
								this.collectMsg.id = questionId,
								this.collectMsg.collect = collect,
								this.collectMsg.index = index ||0,
								vm.ix = ix
								$.ajax({
									type: "POST",
									url: http + "/gobangteach/classroom/loadQuestion",
									data: "questionid=" + questionId + "&token=" + token + "&uid=" + uid,
									dataType: 'json',
									success: function(data) {
										console.log("棋盘信息", data);
										window.currentGameId = data.data.chessid;
										window.quesionID = questionId;
										$('.imgBox').removeClass('qipuActive')
										$('.imgBox[data-id=' + window.quesionID + ']').addClass('qipuActive');
										vm.description = data.data.questionbank.titlerequs===null||
										data.data.questionbank.titlerequs===''?
												data.data.questionbank.description.split('_')[0]:
												data.data.questionbank.titlerequs
                                       sgfState = data.data.questionbank.sgfstate
                                       
                                       var gameInfo = JSON.parse(data.data.questionbank.chessdata);
											//设置棋盘路数
											$this.game.road = gameInfo.roadX
											
											//更新类型
											$this.game.config.sgfstate = data.data.questionbank.sgfstate
											
											//更新棋谱
											$this.game.svg = gameInfo.listAction; 

											//登入棋局
											eve.f('enterGame',data.data.chessid,uid)();
											//落子回调
											$this.game.playCall = function(d){
												console.log('落子位置',d)
												//落子
												eve.f('handlerAction',data.data.chessid,d)(); 
											}
											document.location.href = "myschema://go?a=14"
									},
									error: function(XMLHttpRequest, data) {
										alert("获取房间信息失败");
									}
								});
							},
							//收藏
							collect:function(){
								//layerTC()
								if(this.collectMsg.collect=='1'){
									layerTC('你确定要取消收藏吗？',function(){
										postCollect()
									})
								}else{
									postCollect()
								}
								function postCollect(){
									$.ajax({
										type:'post',
										url:http+'/gobangteach/QuestionbankController/collectChess',
										data:{
											type:1,
											chessId:vm.collectMsg.id,
											collect:vm.collectMsg.collect===1?2:1,
											token: token,
											uid: uid
										},
										success:function(data){
											
											vm.$set(vm.collectMsg,'collect',vm.collectMsg.collect===1?2:1)
											console.log(vm.collectMsg.collect)
											//更改当前棋谱的 collect 收藏状态
											vm.$set(vm.chessManualList.list[vm.collectMsg.index],'collect',vm.collectMsg.collect)
											
										}
									})
								}
							},
						},
						mounted: function() {
							//页面初始化完成 请求棋谱列表
							
							$.ajax({
								type: "POST",
								url: http+"/gobangteach/SchoolController/wrongTopic",
								data: {
									classInfoId:jsonlink().classInfoId,
									jobId:jsonlink().jobid,
									token:token,
									uid:uid,
									pageSize:9,
									pageNum:1,
								},
								dataType: 'json',
								success: function(data) {
									vm.wrongTopic=data.data[0]
									console.log("444", data);
								},
								error: function(XMLHttpRequest, data) {
									console.log("获取房间信息失败");
								}
							});
							
							
							
							mySwiper = new Swiper('.swiper-container', {
								slidesPerView: '3',
								//loop: true
							})

							var $this = this;
							
							//棋盘缩放功能
							new RTP.PinchZoom($(".chessBox"), {
								animationDuration:200,
								maxZoom:3
							});
							
							//初始化棋盘
							this.game = new xsgo('gameCanvas',{
								//isShowCoord:1,//显示坐标
								queue:[],
								type:2,//2类型为做题
								bgColor:'#ffd687',
								affirmMovelater:1//开启确认落子
							})
							
							//确认落子回调
							$this.game.qrlzState = function(val){
								$this.qrlzState = val
							}

							//链接成功回调
							eve.on('socketOpen',function(){
								console.log('链接成功')
								$this.getList();
							})
							
							//棋局登入成功回调
							eve.on('signInResponse',function(){
								console.log('登入成功');
							})
							
							//落子结果
							eve.on("handlerActionResult", function(data) {
								console.log('落子结果:',data)
								$this.game.addQueue(data) //添加子到棋盘
								var str = data.join('').indexOf('AE');
								if(str>0){ //是否有提子
									document.getElementById('ChipMany').play() //提子音效
								}else{
									document.getElementById('stepmusic').play() //落子声
								}
							});
							

							/**
							 *  游戏结束
							 */
							eve.on("notifyGameOver", function(status, blackSum, whiteSum) {

								if(status === 12) {
									msgYN('msg-no', function() {
										next()
									})

									$("#aswError").attr("src","music/aswError.mp3");
									$("#aswError")[0].play();
									$('.imgBox[data-id=' + window.quesionID + ']').removeClass('right').addClass('wrong');
									addRightWrong('2')
									updateErrorQuestionsStates(1)
								} else if(status === 13) {
									msgYN('msg-yes', function() {
										next()
									})

									$("#aswRight").attr("src","music/aswRight.mp3");
									$("#aswRight")[0].play();
									$('.imgBox[data-id=' + window.quesionID + ']').removeClass('wrong').addClass('right');
									addRightWrong('1')
                                   updateErrorQuestionsStates(2)
                                   
								} else {
									layerTC('游戏结束' + status)
								}

								function next() {
									var oId = $('.imgBox[data-id=' + window.quesionID + ']').parent().next().find('.imgBox').attr('data-id');
									var index = $('.imgBox[data-id=' + window.quesionID + ']').parent().next().find('.imgBox').attr('data-index');
									var ix = $('.imgBox[data-id=' + window.quesionID + ']').parent().next().find('.imgBox').attr('data-ix');
									mySwiper.swipeTo(index - 1);
									if(oId) {
										vm.loadMyJob(oId,'','0',ix);
									}
								}

								function updateErrorQuestionsStates(states) {
									var param = {
										states: states,
										quesionID: window.quesionID,
										uid: uid,
										token: token
									}
									console.log('param:', param)
									$.ajax({
										url: http + '/gobangteach/classroom/updateErrorQuestionsStates',
										type: "POST",
										dataType: "json",
										data: $.param(param),
										success: function(data) {
											console.log("ClearChessboard", data);
										},
										error: function(XMLHttpRequest, data) {
											alert("更新该题失败");
										}
									});
								}
								//更新题_____
								function addRightWrong(sign) {
									var param = {
										chessId: window.quesionID,
										rightWrong: sign, //答题的对错情况   1 代表对 2 代表错
										source: 1, //题来源    1 题库 2.错题本3作业4课件
										uid: uid,
										token: token
									}
									console.log(param)
									$.ajax({
										url: http + '/gobangteach/QuestionbankController/addRightWrong',
										type: "POST",
										dataType: "json",
										data: $.param(param),
										success: function(data) {
											console.log("ClearChessboard", data);
										},
										error: function(XMLHttpRequest, data) {
											console.log("更新该题失败");
										}
									});
								}
							});

						}
					})
		</script>
	</body>

</html>
