<!DOCTYPE html>
<html>

	<head>
		<meta charset="UTF-8">
		<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
		<meta name="renderer" content="webkit">
		<meta name="viewport" content="width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no" />
		<title>先手围棋智能教育服务平台</title>
		<link rel="stylesheet" type="text/css" href="css/lib/public.css"/>
		<link rel="stylesheet" type="text/css" href="css/custom/webStyle.css"/>
		<link rel="stylesheet" type="text/css" href="css/lib/animate.min.css" />
		<script src="js/gobang/common.js" type="text/javascript" charset="utf-8" name="公共配置信息"></script>
		<script src="libs/jquery/jquery.js" type="text/javascript" charset="utf-8"></script>
		<link rel="stylesheet" type="text/css" href="libs/layer/layer-v3.1.1/layer/theme/default/layer.css"/>
		<script src="libs/layer/layer-v3.1.1/layer/layer.js" type="text/javascript" charset="utf-8"></script>
		<script src="js/lib/rem.js" type="text/javascript" charset="utf-8"></script>
		<link rel="stylesheet" type="text/css" href="libs/swiper/css/idangerous.swiper.css"/>
		<script src="libs/swiper/js/idangerous.swiper.min.js" type="text/javascript" charset="utf-8"></script>
		<script src="libs/vuejs/vue.js" type="text/javascript" charset="utf-8"></script>
		<!-- 棋盘 -->
		<link rel="stylesheet" type="text/css" href="chess/css/chess.css"/>
		<link rel="stylesheet" type="text/css" href="chess/skin/skin1/skin1.css"/>
		<script src="chess/js/eve.js" type="text/javascript" charset="utf-8"></script>
		<script src="chess/js/XSGO.js" type="text/javascript" charset="utf-8"></script>
		<script src="chess/js/bundle.js" type="text/javascript" charset="utf-8"></script>
		<script src="chess/js/GSocket.js" type="text/javascript" charset="utf-8"></script>
	</head>
	<style type="text/css"></style>

	<body style="display: none;">
		<div id='questionStore' class="ha100 oh">
			<p class="fs30 df ai-c jc-c bge6f wa100 c003 h80">{{description}}</p>
			<div class="rel boardBg" id='canvasBox'>
				<div id="gameCanvas" onselectstart="return false"></div>
			</div>

			<div class="btmBox wa100 df ai-c jc-c fw-w " v-show='!qrlzState'>

				<div class="w700 h210 mb40 swiper-container oh">
					<div class="swiper-wrapper">
						<div v-if='chessManualList.length' class="swiper-slide " v-for='(x,index) in chessManualList'>
							<div :data-id='x.id' :data-index='index' :class="['w210 h210 m0a bgf rel imgBox',
								{'right':rightQuestionTest.indexOf(x.id.toString())>=0},
								{'wrong':wrongQuestionTest.indexOf(x.id.toString())>=0},
								{'Undone':rightQuestionTest.indexOf(x.id.toString())<0 && wrongQuestionTest.indexOf(x.id.toString())<0}]">
								<div class="wa100 ha100 b3red abs tp0 lt0 dn bkuang"></div>
								<img @click="loadMyJob(x.id)" class="wa100 ha100" :src="x.snapshot || x.Snapshot" alt="" />
							</div>
						</div>
					</div>
				</div>
				<div class="wa100 h70 df ai-c jc-sa">
					<!--<button class="btn-n w130 h60 bg_qs_01 cc06804" @click='submitWord()'>提交测试</button>-->
				</div>
			</div>

			<div v-show='qrlzState' class="df ai-c jc-sa pt30 pl20 pr20">
				<button type="button" class="w72 h72 btn-n btn_w" @click="game.steering('w')"></button>
				<button type="button" class="w72 h72 btn-n btn_s" @click="game.steering('s')"></button>
				<button type="button" class="h72 w150 btn-n bt_btn ccf5003 fs30" @click="game.steering('e')">确认落子</button>
				<button type="button" class="w72 h72 btn-n btn_a" @click="game.steering('a')"></button>
				<button type="button" class="w72 h72 btn-n btn_d" @click="game.steering('d')"></button>
			</div>
			<div class="getJf wa100 abs tp140 animated zoomInDown dn" style="z-index:9999999999999;">
				<img src="img/play/jf_1.png" class="w140 h56 db m0a">
			</div> 
			<audio src="music/ChipMany.wav" type="hidden" id="ChipMany"></audio>
			<audio src="music/STONE0.wav" type="hidden" id="stepmusic"></audio>
			<audio src="music/aswError.mp3" type="hidden" id="aswError"></audio>
			<audio src="music/aswRight.mp3" type="hidden" id="aswRight"></audio>
		</div>

		<!-- <script src="libs/require/require.js" type="text/javascript" charset="utf-8"></script> -->
		<script type="text/javascript">
			// require(['js/lib/require.config'], function() {
			// 	require([
			// 		'Vue',
			// 		'rem',
			// 		'swiper'
			// 	], function(Vue) {
					$('body').show();
				//	window.Vue = Vue; //vue全局
					$('#gameCanvas').css('width', $('body').width()).css('height', $('body').width());
					$('.btmBox').height($('body').height() - $('body').width()-document.documentElement.offsetWidth/7.5*0.8)
                        var sgfState = 0;
					var mySwiper
					var vm = new Vue({
						el: '#questionStore',
						data: {
							chessManualList: [], //棋谱列表
							qrlzState: 0,
							game:'',//棋盘
							description:'',
							daymsg:{},
							wordInfo:{},
							rightQuestionTest:[], //正确的题包括回显
							wrongQuestionTest:[],//错题包括回显
						},
						methods: {
							teacherDayTask: function() {
								//this.getList(this.daymsg.questionsTest)
								$.ajax({
									url: http+'/gobangteach/PushTeacherController/teacherDayTask',
									type: 'post',
									data: {
										token:token,
										uid:uid
									},
									success: function(data) {
										if(data.error.returnCode==0){
											vm.daymsg = data.data
											if(data.data.rightQuestionTest){
												vm.rightQuestionTest = data.data.rightQuestionTest.split(',')
											}
											if(data.data.wrongQuestionTest){
												vm.wrongQuestionTest = data.data.wrongQuestionTest.split(',')
											}
											console.log(55666,data)
											if(data.data.questionsTest&&data.data.achieveTest==0){
												vm.getList(data.data.questionsTest)
											}
										}else{
											layerTC(data.error.returnMessage)
										}
										
									},
									error: function(data) {
										console.log(data)
									}
								}) 
							},
							//棋谱列表
							getList: function(questions) {
								$this = this
								$.ajax({
									type: 'post',
									url: http+'/gobangteach/PushTeacherController/getPushTeachQuestionInfo',
									type: 'post',
									data: {
										questions: questions,
										token:token,
										uid:uid
									},
									success: function(data) {

										if(data.error.returnCode==0 && data.data.length != 0) {
											vm.chessManualList = data.data;
											
											vm.$nextTick(function() {
												vm.loadMyJob($('.Undone').eq(0).attr('data-id'))
												mySwiper.reInit();
												mySwiper.swipeTo(0);
											})
										} else {
											//如果没有错题 加载电子棋盘
											$this.game.config.road = 19; //路数为19路
											$this.game.config.type =1;	//棋盘类型 1为电子棋盘
											$this.game.init();	// 重新初始化
										}
									}
								})
							},
							//根据棋谱id 加载棋盘
							loadMyJob: function(questionId) {
									$.ajax({
										type: "POST",
										url: http + "/gobangteach/classroom/loadQuestion",
										data: "questionid=" + questionId + "&token=" + token + "&uid=" + uid,
										dataType: 'json',
										success: function(data) {
											console.log("棋盘信息", data);
											window.currentGameId = data.data.chessid;
											window.quesionID = questionId;
											$('.imgBox').removeClass('qipuActive')
											$('.imgBox[data-id=' + window.quesionID + ']').addClass('qipuActive');
											vm.description = data.data.questionbank.titlerequs===null||
											data.data.questionbank.titlerequs===''?
													data.data.questionbank.description.split('_')[0]:
													data.data.questionbank.titlerequs
                                           sgfState = data.data.questionbank.questionKind
                                           
                                           var gameInfo = JSON.parse(data.data.questionbank.chessdata);
											//设置棋盘路数
											$this.game.road = gameInfo.roadX
											
											//更新类型
											$this.game.config.sgfstate = data.data.questionbank.questionKind
											
											//更新棋谱
											$this.game.svg = gameInfo.listAction; 

											//登入棋局
											eve.f('enterGame',data.data.chessid,uid)();
											//落子回调
											$this.game.playCall = function(d){
												console.log('落子位置',d)
												//落子
												eve.f('handlerAction',data.data.chessid,d)(); 
											}
										},
										error: function(XMLHttpRequest, data) {
											alert("获取房间信息失败");
										}
									});
							},
							submitWord: function (score){
								var $this = this
								$.ajax({
									url: http+'/gobangteach/PushTeacherController/addUserScore',
									type: "POST",
									dataType: "json",
									data: {
										rightQuestion:vm.rightQuestionTest.length>0?vm.rightQuestionTest[vm.rightQuestionTest.length-1]:'',
										wrongQuestion:vm.wrongQuestionTest.length>0?vm.wrongQuestionTest[vm.wrongQuestionTest.length-1]:'',
										score:score||'',//Math.round(score),
										dayNum:$this.daymsg.dayNum,
										token:token,
										uid:uid
									},
									success: function(data) {

										if(data.error.returnCode==0){
											if(score){
												layerTC('测试完成当前得分'+Math.round(score)+'分',function(){
													 document.location.href = "myschema://go?a=1";
												})
											}
										}else{
											layerTC(data.error.returnMessage)
										}
										
										
									},
									error: function(XMLHttpRequest, data) {
										console.log("更新该题失败");
									}
								});
							},
						},
						mounted: function() {
							//关闭loding
							document.location.href = "myschema://go?a=14"
							
							mySwiper = new Swiper('.swiper-container', {
								slidesPerView: '3',
								//loop: true
							})

							var $this = this;
							
							//初始化棋盘
							this.game = new xsgo('gameCanvas',{
								//isShowCoord:1,//显示坐标
								queue:[],
								type:2,//2类型为做题
								bgColor:'#ffd687',
								affirmMovelater:1//开启确认落子
							})
							
							//确认落子回调
							$this.game.qrlzState = function(val){
								$this.qrlzState = val
							}

							//链接成功回调
							eve.on('socketOpen',function(){
								console.log('链接成功')
								//页面初始化完成 请求棋谱列表
								$this.teacherDayTask();
							})
							
							//棋局登入成功回调
							eve.on('signInResponse',function(){
								console.log('登入成功');
							})
							
							//落子结果
							eve.on("handlerActionResult", function(data) {
								console.log('落子结果:',data)
								$this.game.addQueue(data) //添加子到棋盘
								var str = data.join('').indexOf('AE');
								if(str>0){ //是否有提子
									$('#ChipMany')[0].play()//提子声
								}else{
									$('#stepmusic ')[0].play()//落子声
								}
							});
							
							/**
							 *  游戏结束
							 */
							eve.on("notifyGameOver", function(status, blackSum, whiteSum) {

								if(status === 12) {
									msgYN('msg-no', function() {
										next()
									})
									$('#aswError')[0].play() //答错
									$('.imgBox[data-id=' + window.quesionID + ']').removeClass('right').addClass('wrong');
									addRightWrong('2')
									updateErrorQuestionsStates(1)
									vm.$set(vm.wrongQuestionTest,vm.wrongQuestionTest.length,window.quesionID.toString());
										
									if(vm.rightQuestionTest.length+vm.wrongQuestionTest.length==vm.chessManualList.length){
										var score = vm.rightQuestionTest.length*(100/vm.daymsg.questionsTest.split(',').length)
										vm.submitWord(Math.round(score).toString())
									}else{
										vm.submitWord()
									}
								} else if(status === 13) {
									msgYN('msg-yes', function() {
										next()
									})
									$('#aswRight')[0].play() //答对
									$('.imgBox[data-id=' + window.quesionID + ']').removeClass('wrong').addClass('right');
									addRightWrong('1')
                                    vm.$set(vm.rightQuestionTest,vm.rightQuestionTest.length,window.quesionID.toString());
										
									if(vm.rightQuestionTest.length+vm.wrongQuestionTest.length==vm.chessManualList.length){
										var score = vm.rightQuestionTest.length*(100/vm.daymsg.questionsTest.split(',').length)
										vm.submitWord(Math.round(score).toString())
									}else{
										vm.submitWord()
									}
								} else {
									layerTC('游戏结束' + status)
								}

								function next() {
									var oId = $('.Undone').eq(0).attr('data-id');
									var index = $('.Undone').eq(0).attr('data-index');

									mySwiper.swipeTo(index - 1);

									if(oId) {
										vm.loadMyJob(oId);
									}
								}

								function updateErrorQuestionsStates(states) {
									var param = {
										states: states,
										quesionID: window.quesionID,
										uid: uid,
										token: token
									}
									console.log('param:', param)
									$.ajax({
										url: http + '/gobangteach/classroom/updateErrorQuestionsStates',
										type: "POST",
										dataType: "json",
										data: $.param(param),
										success: function(data) {
											console.log("ClearChessboard", data);
										},
										error: function(XMLHttpRequest, data) {
											alert("更新该题失败");
										}
									});
								}
								//更新题_____
								function addRightWrong(sign) {
									var param = {
										chessId: window.quesionID,
										rightWrong: sign, //答题的对错情况   1 代表对 2 代表错
										source: 6, //题来源    1 题库 2.错题本3作业4课件
										uid: uid,
										token: token
									}
									console.log(param)
									$.ajax({
										url: http + '/gobangteach/QuestionbankController/addRightWrong',
										type: "POST",
										dataType: "json",
										data: $.param(param),
										success: function(data) {
											if(sign=='1'){
												if(data.data.questionJf>0){
													$(".getJf").show();
													setTimeout(function(){
														$(".getJf").hide();
													},2000)
												}
											}
										},
										error: function(XMLHttpRequest, data) {
											console.log("更新该题失败");
										}
									});
								}
							});

						}
					})
			// 	})
			// })
		</script>
	</body>

</html>
